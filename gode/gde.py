# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_gde.ipynb.

# %% auto 0
__all__ = ['GDEFunc', 'ControlledGDEFunc', 'DGLGDEFunc']

# %% ../nbs/03_gde.ipynb 3
import dgl
import torch, torch.nn as nn
from .gcn import GCNLayer
from .data import augment_with_time
from typing import Callable


class GDEFunc(nn.Module):
    def __init__(
        self, 
        gnn:nn.Module,         
        augment:bool=False,    
        augment_size:int=2
    ):
        """General GDE function class. To be passed to an ODEBlock"""
        super().__init__()
        self.gnn = gnn        # takes in a gnn module 
        
        # Number of function calls
        self.nfe = 0
        
        # Whether or not to augment input tensor x
        self.augment = augment
        
        # Dimensions of 0s to augment x with (as well as the time vector t)
        self.augment_size = augment_size
    
    def set_graph(self, g:dgl.DGLGraph): # The input is a graph object from DGL
        for layer in self.gnn:
            layer.g = g # Iterates over the layers in gnn and assigns the graph g to each one
            
    def forward(self, t, x):
        self.nfe += 1
        
        x = augment_with_time(x, t, self.augment_size, self.augment)  
        
        # NOTE: technically dxdt
        x = self.gnn(x)
        return x

# %% ../nbs/03_gde.ipynb 4
class ControlledGDEFunc(GDEFunc):
    def __init__(self, gnn:nn.Module):
        """ Controlled GDE version. Input information is preserved longer via hooks to input node features X_0, 
            affecting all ODE function steps. Requires assignment of '.h0' before calling .forward"""
        super().__init__(gnn)
        self.nfe = 0
            
    def forward(self, t, x):
        self.nfe += 1
        x = torch.cat([x, self.h0], 1) # Concatenates the initial node features (self.h0) with the current node features x along the feature dimension
        x = self.gnn(x)
        return x
    

# %% ../nbs/03_gde.ipynb 5
class DGLGDEFunc(nn.Module):
    def __init__(
        self, 
        gnn:nn.Module, 
        augment:bool=False, 
        augment_size:int=2
    ):
        """General GDE function class. To be passed to an ODEBlock"""
        super().__init__()
        self.gnn = gnn
        
        # Number of function calls
        self.nfe = 0
        
        # Whether or not to augment input tensor x
        self.augment = augment
        
        # Dimensions of 0s to augment x with (as well as the time vector t)
        self.augment_size = augment_size
    
    def set_graph(self, g:dgl.DGLGraph):
        for layer in self.gnn:
            layer.g = g
            
    def forward(self, t, x):
        self.nfe += 1
        
        x = augment_with_time(x, t, self.augment_size, self.augment)  
        
        # NOTE: technically dxdt
        x = self.gnn(x)
        return x
